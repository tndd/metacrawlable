🎯 目標

現在のドキュメントに存在する技術的矛盾と不明瞭な仕様を解消し、実装可能な一貫した仕様書に修正する。

🔍 発見された主要な矛盾

1. 【重大】Next.js実装パターンの不整合

問題: getServerSideProps()使用の記載（Pages Router用）がApp Router環境で使用不可
影響: 実装不可能

2. サイトマップ/Robots.txt設定の論理矛盾

問題: 設定マトリックスで以下の矛盾
- DynamicMaze: "sitemap.xml: なし" + "robots.txt: Disallow /dynamic"
- BotWarden: "robots.txt: 禁止" の具体的内容不明
- 複数サイトで「❌ なし」と具体的ルールが併記

3. 技術仕様の具体性不足

問題: 実装に必要な詳細が不明
- Bot検出の具体的User-Agentリスト
- DOMランダム化の具体的手法
- エラーレスポンスの詳細仕様

📋 修正計画（優先順位順）

フェーズ1: 重大な技術的矛盾の解消

1.1 Next.js App Router対応
- docs/structure.md L62: getServerSideProps() → Server Components + 動的生成パターンに修正
- docs/sites/dynamic-maze.md L18: 同様の修正
- App Router適切なパターンの明記

1.2 サイトマップ/Robots.txt マトリックス修正
- docs/sitemap-robots.md: 論理的に一貫した設定表に更新
- 各サイトの具体的robots.txtの内容を明記
- 「なし」「禁止」などの曖昧な表現を具体的内容に置換

フェーズ2: 実装仕様の具体化

2.1 Bot検出仕様の明確化
- docs/anti-crawler.md: 具体的User-Agentリストを追加
- ブロック対象とレスポンス内容の詳細仕様
- ミドルウェア実装パターンの例示

2.2 動的コンテンツ生成仕様
- DOMランダム化の具体的アルゴリズム
- 変動パターンと一貫性ルール
- パフォーマンス要件

2.3 エラーハンドリング仕様
- 404ページの具体的生成ロジック
- HTTPステータスコードの詳細
- エラーレスポンス内容の標準化

フェーズ3: 実装ガイドラインの追加

3.1 開発環境セットアップ
- 必要なNode.js/Next.jsバージョン
- 依存関係とセットアップ手順
- 環境変数設定

3.2 実装例とベストプラクティス
- 各機能の具体的コード例
- テスト手順
- トラブルシューティング

🛠️ 実行手順

1. 技術的矛盾の修正: Next.js App Router仕様への統一
2. 設定マトリックス再構築: 論理的一貫性の確保
3. 具体的仕様の追加: 実装に必要な詳細情報の補完
4. 整合性チェック: 全ドキュメント間の一貫性確認
5. 実装可能性検証: 修正された仕様の実装テスト

📊 期待される成果

- 実装可能: 技術的矛盾の完全解消
- 明確: 曖昧さのない具体的仕様
- 一貫: ドキュメント間の整合性確保
- 完全: 実装に必要な情報の網羅

この計画により、MetaCrawlableプロジェクトは確実に実装可能な仕様書となります。
